items:
- uid: System.Xml.Linq.Extensions
  id: Extensions
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.Extensions.Ancestors``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Attributes(IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Attributes(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantNodes``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Descendants``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.Descendants``1(IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Elements``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.Elements``1(IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.InDocumentOrder``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.Nodes``1(IEnumerable{``0})
  - System.Xml.Linq.Extensions.Remove(IEnumerable{System.Xml.Linq.XAttribute})
  - System.Xml.Linq.Extensions.Remove``1(IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: Extensions
  fullName: System.Xml.Linq.Extensions
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 13
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: Defines the LINQ to XML extension methods.
  example: []
  syntax:
    content: 'public class Extensions : object'
    content.vb: Public Class Extensions Inherits Object
  inheritance:
  - System.Object
- uid: System.Xml.Linq.Extensions.Attributes(IEnumerable{System.Xml.Linq.XElement})
  id: Attributes(IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Attributes(IEnumerable<XElement>)
  name.vb: Attributes(IEnumerable(Of XElement))
  fullName: System.Xml.Linq.Extensions.Attributes(IEnumerable<System.Xml.Linq.XElement>)
  fullName.vb: System.Xml.Linq.Extensions.Attributes(IEnumerable(Of System.Xml.Linq.XElement))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 24
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns all of the <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref>s for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> of

    this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XAttribute> Attributes(IEnumerable<XElement> source)
    content.vb: Public Shared Function Attributes(source As IEnumerable(Of XElement)) As IEnumerable(Of XAttribute)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    return:
      type: IEnumerable{System.Xml.Linq.XAttribute}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref> containing the XML

        Attributes for every <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in the target <see cref="!:System.Collections.IEnumerable" />

        of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Attributes(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: Attributes(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Attributes(IEnumerable<XElement>, XName)
  name.vb: Attributes(IEnumerable(Of XElement), XName)
  fullName: System.Xml.Linq.Extensions.Attributes(IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.Attributes(IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 40
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns the <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref>s that have a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  Each

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>'s <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref>s in the target <see cref="!:System.Collections.IEnumerable" />

    of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> are scanned for a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XAttribute> Attributes(IEnumerable<XElement> source, XName name)
    content.vb: Public Shared Function Attributes(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XAttribute)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    - id: name
      type: System.Xml.Linq.XName
    return:
      type: IEnumerable{System.Xml.Linq.XAttribute}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref> containing the XML

        Attributes with a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref> for every <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in

        the target <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Ancestors``1(IEnumerable{``0})
  id: Ancestors``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Ancestors<T>(IEnumerable<T>)
  name.vb: Ancestors(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.Ancestors<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 56
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the ancestors (parent

    and it's parent up to the root) of each of the <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>s in this

    <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Ancestors<T>(IEnumerable<T> source)where T : XNode'
    content.vb: Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the ancestors (parent

        and it's parent up to the root) of each of the <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>s in this

        <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Ancestors``1(IEnumerable{``0},System.Xml.Linq.XName)
  id: Ancestors``1(IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Ancestors<T>(IEnumerable<T>, XName)
  name.vb: Ancestors(Of T)(IEnumerable(Of T), XName)
  fullName: System.Xml.Linq.Extensions.Ancestors<T>(IEnumerable<T>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(IEnumerable(Of T), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 72
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the ancestors (parent

    and it's parent up to the root) that have a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for each

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Ancestors<T>(IEnumerable<T> source, XName name)where T : XNode'
    content.vb: Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    - id: name
      type: System.Xml.Linq.XName
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the ancestors (parent

        and it's parent up to the root) that have a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for each

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  id: AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: AncestorsAndSelf(IEnumerable<XElement>)
  name.vb: AncestorsAndSelf(IEnumerable(Of XElement))
  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable<System.Xml.Linq.XElement>)
  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable(Of System.Xml.Linq.XElement))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 90
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's ancestors (parent and it's parent up to the root).

    This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XElement> AncestorsAndSelf(IEnumerable<XElement> source)
    content.vb: Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's ancestors (parent and it's parent up to the root).

        This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: AncestorsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: AncestorsAndSelf(IEnumerable<XElement>, XName)
  name.vb: AncestorsAndSelf(IEnumerable(Of XElement), XName)
  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 108
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's ancestors (parent and it's parent up to the root)

    that match the passed in <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for each

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XElement> AncestorsAndSelf(IEnumerable<XElement> source, XName name)
    content.vb: Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    - id: name
      type: System.Xml.Linq.XName
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's ancestors (parent and it's parent up to the root)

        that match the passed in <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for each

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Nodes``1(IEnumerable{``0})
  id: Nodes``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Nodes<T>(IEnumerable<T>)
  name.vb: Nodes(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.Nodes<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.Nodes(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 117
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XNode" data-throw-if-not-resolved="false"></xref> over the content of a set of nodes
  example: []
  syntax:
    content: 'public static IEnumerable<XNode> Nodes<T>(IEnumerable<T> source)where T : XContainer'
    content.vb: Public Shared Function Nodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XNode}
- uid: System.Xml.Linq.Extensions.DescendantNodes``1(IEnumerable{``0})
  id: DescendantNodes``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantNodes<T>(IEnumerable<T>)
  name.vb: DescendantNodes(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.DescendantNodes<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.DescendantNodes(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 145
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XNode" data-throw-if-not-resolved="false"></xref> over the descendants of a set of nodes
  example: []
  syntax:
    content: 'public static IEnumerable<XNode> DescendantNodes<T>(IEnumerable<T> source)where T : XContainer'
    content.vb: Public Shared Function DescendantNodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XNode}
- uid: System.Xml.Linq.Extensions.Descendants``1(IEnumerable{``0})
  id: Descendants``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Descendants<T>(IEnumerable<T>)
  name.vb: Descendants(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.Descendants<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 161
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the descendants (children

    and their children down to the leaf level).  This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in

    this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Descendants<T>(IEnumerable<T> source)where T : XContainer'
    content.vb: Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the descendants (children

        and their children down to the leaf level).  This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in

        this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Descendants``1(IEnumerable{``0},System.Xml.Linq.XName)
  id: Descendants``1(IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Descendants<T>(IEnumerable<T>, XName)
  name.vb: Descendants(Of T)(IEnumerable(Of T), XName)
  fullName: System.Xml.Linq.Extensions.Descendants<T>(IEnumerable<T>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(IEnumerable(Of T), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 177
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the descendants (children

    and their children down to the leaf level) that have a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done

    for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in the target <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Descendants<T>(IEnumerable<T> source, XName name)where T : XContainer'
    content.vb: Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    - id: name
      type: System.Xml.Linq.XName
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the descendants (children

        and their children down to the leaf level) that have a matching <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done

        for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(IEnumerable{System.Xml.Linq.XElement})
  id: DescendantNodesAndSelf(IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantNodesAndSelf(IEnumerable<XElement>)
  name.vb: DescendantNodesAndSelf(IEnumerable(Of XElement))
  fullName: System.Xml.Linq.Extensions.DescendantNodesAndSelf(IEnumerable<System.Xml.Linq.XElement>)
  fullName.vb: System.Xml.Linq.Extensions.DescendantNodesAndSelf(IEnumerable(Of System.Xml.Linq.XElement))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 195
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's descendants

    that match the passed in <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for each

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XNode> DescendantNodesAndSelf(IEnumerable<XElement> source)
    content.vb: Public Shared Function DescendantNodesAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    return:
      type: IEnumerable{System.Xml.Linq.XNode}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and descendants.

        This is done for each

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  id: DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantsAndSelf(IEnumerable<XElement>)
  name.vb: DescendantsAndSelf(IEnumerable(Of XElement))
  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable<System.Xml.Linq.XElement>)
  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable(Of System.Xml.Linq.XElement))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 213
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's descendants (children and children's children down

    to the leaf nodes).  This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" />

    of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XElement> DescendantsAndSelf(IEnumerable<XElement> source)
    content.vb: Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's descendants (children and children's children down

        to the leaf nodes).  This is done for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" />

        of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: DescendantsAndSelf(IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantsAndSelf(IEnumerable<XElement>, XName)
  name.vb: DescendantsAndSelf(IEnumerable(Of XElement), XName)
  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 231
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

    <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's descendants (children and children's children down

    to the leaf nodes) that match the passed in <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for

    each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static IEnumerable<XElement> DescendantsAndSelf(IEnumerable<XElement> source, XName name)
    content.vb: Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XElement}
    - id: name
      type: System.Xml.Linq.XName
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the

        <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> and it's descendants (children and children's children down

        to the leaf nodes) that match the passed in <xref href="System.Xml.Linq.XName" data-throw-if-not-resolved="false"></xref>.  This is done for

        each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Elements``1(IEnumerable{``0})
  id: Elements``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Elements<T>(IEnumerable<T>)
  name.vb: Elements(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.Elements<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 245
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

    for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Elements<T>(IEnumerable<T> source)where T : XContainer'
    content.vb: Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

        for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.Elements``1(IEnumerable{``0},System.Xml.Linq.XName)
  id: Elements``1(IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Elements<T>(IEnumerable<T>, XName)
  name.vb: Elements(Of T)(IEnumerable(Of T), XName)
  fullName: System.Xml.Linq.Extensions.Elements<T>(IEnumerable<T>, System.Xml.Linq.XName)
  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(IEnumerable(Of T), System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 259
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

    with a matching for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<XElement> Elements<T>(IEnumerable<T> source, XName name)where T : XContainer'
    content.vb: Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    - id: name
      type: System.Xml.Linq.XName
    typeParameters:
    - id: T
    return:
      type: IEnumerable{System.Xml.Linq.XElement}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

        for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(IEnumerable{``0})
  id: InDocumentOrder``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: InDocumentOrder<T>(IEnumerable<T>)
  name.vb: InDocumentOrder(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.InDocumentOrder<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.InDocumentOrder(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 274
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Returns an <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

    with a matching for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: 'public static IEnumerable<T> InDocumentOrder<T>(IEnumerable<T> source)where T : XNode'
    content.vb: Public Shared Function InDocumentOrder(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of T)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
      description: >-
        An <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> containing the child elements

        for each <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref> in this <see cref="!:System.Collections.IEnumerable" /> of <xref href="System.Xml.Linq.XElement" data-throw-if-not-resolved="false"></xref>.

        in document order
- uid: System.Xml.Linq.Extensions.Remove(IEnumerable{System.Xml.Linq.XAttribute})
  id: Remove(IEnumerable{System.Xml.Linq.XAttribute})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Remove(IEnumerable<XAttribute>)
  name.vb: Remove(IEnumerable(Of XAttribute))
  fullName: System.Xml.Linq.Extensions.Remove(IEnumerable<System.Xml.Linq.XAttribute>)
  fullName.vb: System.Xml.Linq.Extensions.Remove(IEnumerable(Of System.Xml.Linq.XAttribute))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 296
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Removes each <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref> represented in this <see cref="!:System.Collections.IEnumerable" /> of

    <xref href="System.Xml.Linq.XAttribute" data-throw-if-not-resolved="false"></xref>.  Note that this method uses snapshot semantics (copies the

    attributes to an array before deleting each).
  example: []
  syntax:
    content: public static void Remove(IEnumerable<XAttribute> source)
    content.vb: Public Shared Sub Remove(source As IEnumerable(Of XAttribute))
    parameters:
    - id: source
      type: IEnumerable{System.Xml.Linq.XAttribute}
- uid: System.Xml.Linq.Extensions.Remove``1(IEnumerable{``0})
  id: Remove``1(IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Remove<T>(IEnumerable<T>)
  name.vb: Remove(Of T)(IEnumerable(Of T))
  fullName: System.Xml.Linq.Extensions.Remove<T>(IEnumerable<T>)
  fullName.vb: System.Xml.Linq.Extensions.Remove(Of T)(IEnumerable(Of T))
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Xml.XDocument/src/System/Xml/Linq/Extensions.cs
    startLine: 314
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: >-
    Removes each <xref href="System.Xml.Linq.XNode" data-throw-if-not-resolved="false"></xref> represented in this <see cref="!:System.Collections.IEnumerable" />

    T which must be a derived from <xref href="System.Xml.Linq.XNode" data-throw-if-not-resolved="false"></xref>.  Note that this method uses snapshot semantics

    (copies the <xref href="System.Xml.Linq.XNode" data-throw-if-not-resolved="false"></xref>s to an array before deleting each).
  example: []
  syntax:
    content: 'public static void Remove<T>(IEnumerable<T> source)where T : XNode'
    content.vb: Public Shared Sub Remove(Of T As XNode)(source As IEnumerable(Of T))
    parameters:
    - id: source
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: false
  name: XAttribute
  fullName: System.Xml.Linq.XAttribute
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: false
  name: XElement
  fullName: System.Xml.Linq.XElement
- uid: IEnumerable{System.Xml.Linq.XElement}
  definition: IEnumerable`1
  name: IEnumerable<XElement>
  fullName: IEnumerable<System.Xml.Linq.XElement>
  fullname.vb: IEnumerable(Of System.Xml.Linq.XElement)
  name.vb: IEnumerable(Of XElement)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XElement
    name: XElement
    fullName: System.Xml.Linq.XElement
  - name: )
    fullName: )
- uid: IEnumerable{System.Xml.Linq.XAttribute}
  definition: IEnumerable`1
  name: IEnumerable<XAttribute>
  fullName: IEnumerable<System.Xml.Linq.XAttribute>
  fullname.vb: IEnumerable(Of System.Xml.Linq.XAttribute)
  name.vb: IEnumerable(Of XAttribute)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  fullName: IEnumerable<>
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  fullName: System.Xml.Linq.XName
- uid: IEnumerable{{T}}
  definition: IEnumerable`1
  name: IEnumerable<T>
  fullName: IEnumerable<T>
  fullname.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: false
  name: XNode
  fullName: System.Xml.Linq.XNode
- uid: IEnumerable{System.Xml.Linq.XNode}
  definition: IEnumerable`1
  name: IEnumerable<XNode>
  fullName: IEnumerable<System.Xml.Linq.XNode>
  fullname.vb: IEnumerable(Of System.Xml.Linq.XNode)
  name.vb: IEnumerable(Of XNode)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XNode
    name: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    fullName: )
